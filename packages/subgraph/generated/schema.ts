// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Group extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Group entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Group must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Group", id.toString(), this);
    }
  }

  static load(id: string): Group | null {
    return changetype<Group | null>(store.get("Group", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get depth(): i32 {
    let value = this.get("depth");
    return value!.toI32();
  }

  set depth(value: i32) {
    this.set("depth", Value.fromI32(value));
  }

  get zeroValue(): BigInt {
    let value = this.get("zeroValue");
    return value!.toBigInt();
  }

  set zeroValue(value: BigInt) {
    this.set("zeroValue", Value.fromBigInt(value));
  }

  get root(): BigInt {
    let value = this.get("root");
    return value!.toBigInt();
  }

  set root(value: BigInt) {
    this.set("root", Value.fromBigInt(value));
  }

  get size(): i32 {
    let value = this.get("size");
    return value!.toI32();
  }

  set size(value: i32) {
    this.set("size", Value.fromI32(value));
  }

  get numberOfLeaves(): i32 {
    let value = this.get("numberOfLeaves");
    return value!.toI32();
  }

  set numberOfLeaves(value: i32) {
    this.set("numberOfLeaves", Value.fromI32(value));
  }

  get admin(): Bytes {
    let value = this.get("admin");
    return value!.toBytes();
  }

  set admin(value: Bytes) {
    this.set("admin", Value.fromBytes(value));
  }

  get members(): Array<string> {
    let value = this.get("members");
    return value!.toStringArray();
  }

  set members(value: Array<string>) {
    this.set("members", Value.fromStringArray(value));
  }

  get verifiedProofsCount(): i32 {
    let value = this.get("verifiedProofsCount");
    return value!.toI32();
  }

  set verifiedProofsCount(value: i32) {
    this.set("verifiedProofsCount", Value.fromI32(value));
  }

  get verifiedProofs(): Array<string> {
    let value = this.get("verifiedProofs");
    return value!.toStringArray();
  }

  set verifiedProofs(value: Array<string>) {
    this.set("verifiedProofs", Value.fromStringArray(value));
  }
}

export class Member extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Member entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Member must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Member", id.toString(), this);
    }
  }

  static load(id: string): Member | null {
    return changetype<Member | null>(store.get("Member", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get identityCommitment(): BigInt {
    let value = this.get("identityCommitment");
    return value!.toBigInt();
  }

  set identityCommitment(value: BigInt) {
    this.set("identityCommitment", Value.fromBigInt(value));
  }

  get index(): i32 {
    let value = this.get("index");
    return value!.toI32();
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get group(): string {
    let value = this.get("group");
    return value!.toString();
  }

  set group(value: string) {
    this.set("group", Value.fromString(value));
  }
}

export class VerifiedProof extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VerifiedProof entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VerifiedProof must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VerifiedProof", id.toString(), this);
    }
  }

  static load(id: string): VerifiedProof | null {
    return changetype<VerifiedProof | null>(store.get("VerifiedProof", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get signal(): Bytes {
    let value = this.get("signal");
    return value!.toBytes();
  }

  set signal(value: Bytes) {
    this.set("signal", Value.fromBytes(value));
  }

  get index(): i32 {
    let value = this.get("index");
    return value!.toI32();
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get group(): string {
    let value = this.get("group");
    return value!.toString();
  }

  set group(value: string) {
    this.set("group", Value.fromString(value));
  }
}
